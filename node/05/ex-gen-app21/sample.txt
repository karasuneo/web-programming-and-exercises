「Node.js超入門 第4版」 掲載リスト

▼リスト2-1
const http = require('http');

var server = http.createServer(
  (request,response)=>{
    response.end('Hello Node.js!');
  }
);
server.listen(3000);




▼リスト2-2
const http = require('http');

var server = http.createServer(
  (request,response)=>{
    response.end('<html><body><h1>Hello</h1><p>Welcome to Node.js</p></body></html>');
  }
);

server.listen(3000);




▼リスト2-3
const http = require('http');

var server = http.createServer(
  (request, response) => {
    response.setHeader('Content-Type', 'text/html');
    response.write('<!DOCTYPE html><html lang="ja">');
    response.write('<head><meta charset="utf-8">');
    response.write('<title>Hello</title></head>');
    response.write('<body><h1>Hello Node.js!</h1>');
    response.write('<p>This is Node.js sample page.</p>');
    response.write('<p>これは、Node.jsのサンプルページです。</p>', 'utf8');
    response.write('</body></html>');
    response.end();
  }
);

server.listen(3000);
console.log('Server start!');




▼リスト2-4
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title>Index</title>
</head>

<body>
  <h1>Index</h1>
  <p>これは、Indexページです。</p>
</body>

</html>




▼リスト2-5
const http = require('http');
const fs = require('fs');

var server = http.createServer(
  (request, response) => {
    fs.readFile('./index.html', 'UTF-8',
      (error, data) => {
        response.writeHead(200, { 'Content-Type': 'text/html' });
        response.write(data);
        response.end();
      });
  }
);

server.listen(3000);
console.log('Server start!');




▼リスト2-6
const http = require('http');
const fs = require('fs');

var server = http.createServer(getFromClient);

server.listen(3000);
console.log('Server start!');

// ここまでメインプログラム========

// createServerの処理
function getFromClient(req, res) {
  request = req;
  response = res;
  fs.readFile('./index.html', 'UTF-8',
    (error, data) => {
      response.writeHead(200, { 'Content-Type': 'text/html' });
      response.write(data);
      response.end();
    }
  );
}




▼リスト2-7
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title>Index</title>
  <style>
    h1 {
      font-size: 60pt;
      color: #eee;
      text-align: right;
      margin: 0px;
    }

    body {
      font-size: 14pt;
      color: #999;
      margin: 5px;
    }
  </style>
</head>

<body>
  <header>
    <h1>Index</h1>
  </header>
  <div role="main">
    <p>This is Index Page.</p>
    <p>これは、EJSを使ったWebページです。</p>
  </div>
</body>

</html>




▼リスト2-8
const http = require('http');
const fs = require('fs');
const ejs = require('ejs');
 
const index_page = fs.readFileSync('./index.ejs', 'utf8');

var server = http.createServer(getFromClient);

server.listen(3000);
console.log('Server start!');

// ここまでがメインプログラム

// createServerの処理
function getFromClient(request, response){
  var content = ejs.render(index_page);
  response.writeHead(200, {'Content-Type': 'text/html'});
  response.write(content);
  response.end();
}




▼リスト2-9
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%=title %></title>
  <style>
    h1 {
      font-size: 60pt;
      color: #eee;
      text-align: right;
      margin: 0px;
    }

    body {
      font-size: 14pt;
      color: #999;
      margin: 5px;
    }
  </style>
</head>

<body>

  <header>
    <h1><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
  </div>
</body>

</html>




▼リスト2-10
function getFromClient(request, response) {
  var content = ejs.render(index_page, {
    title: "Indexページ",
    content: "これはテンプレートを使ったサンプルページです。",
  });
  response.writeHead(200, { 'Content-Type': 'text/html' });
  response.write(content);
  response.end();
}




▼リスト2-11
h1 {
  font-size: 60pt;
  color:#eee;
  text-align:right;
  margin:0px;
}
body {
  font-size: 12pt;
  color: #999;
  margin:5px;
}
p {
   font-size: 14pt;
  margin: 0px 20px;
}




▼リスト2-12
<link type="text/css" href="./style.css" rel="stylesheet">




▼リスト2-13
const http = require('http');
const fs = require('fs');
const ejs = require('ejs');
const url = require('url');

const index_page = fs.readFileSync('./index.ejs', 'utf8');
const style_css = fs.readFileSync('./style.css', 'utf8');

var server = http.createServer(getFromClient);

server.listen(3000);
console.log('Server start!');

// ここまでメインプログラム

// createServerの処理
function getFromClient(request, response) {
  var url_parts = url.parse(request.url);
  switch (url_parts.pathname) {

    case '/':
      var content = ejs.render(index_page, {
        title: "Index",
        content: "これはテンプレートを使ったサンプルページです。",
      });
      response.writeHead(200, { 'Content-Type': 'text/html' });
      response.write(content);
      response.end();
      break;

    case '/style.css':
      response.writeHead(200, { 'Content-Type': 'text/css' });
      response.write(style_css);
      response.end();
      break;

    default:
      response.writeHead(200, { 'Content-Type': 'text/plain' });
      response.end('no page...');
      break;
  }
}




▼リスト2-14
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%=title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
  rel="stylesheet" crossorigin="anonymous">
</head>

<body class="container">
  <header>
    <h1 class="display-4"><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
  </div>
</body>

</html>




▼リスト2-15
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%=title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
  rel="stylesheet" crossorigin="anonymous">
</head>

<body class="container">
  <header>
    <h1 class="display-4"><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
    <p><a href="/other">Other Pageに移動 &gt;&gt;</a></p>
  </div>
</body>

</html>




▼リスト2-16
const http = require('http');
const fs = require('fs');
const ejs = require('ejs');
const url = require('url');

const index_page = fs.readFileSync('./index.ejs', 'utf8');
const other_page = fs.readFileSync('./other.ejs', 'utf8'); //☆追加
const style_css = fs.readFileSync('./style.css', 'utf8');

var server = http.createServer(getFromClient);

server.listen(3000);
console.log('Server start!');

// ここまでメインプログラム

// createServerの処理
function getFromClient(request, response) {

  var url_parts = url.parse(request.url);
  switch (url_parts.pathname) {

    case '/':
      var content = ejs.render(index_page, {
        title: "Index",
        content: "これはIndexページです。",
      });
      response.writeHead(200, { 'Content-Type': 'text/html' });
      response.write(content);
      response.end();
      break;

    case '/other': //☆追加
      var content = ejs.render(other_page, {
        title: "Other",
        content: "これは新しく用意したページです。",
      });
      response.writeHead(200, { 'Content-Type': 'text/html' });
      response.write(content);
      response.end();
      break;

    default:
      response.writeHead(200, { 'Content-Type': 'text/plain' });
      response.end('no page...');
      break;
  }
}




▼リスト3-1
const http = require('http');
const fs = require('fs');
const ejs = require('ejs');
const url = require('url');

const index_page = fs.readFileSync('./index.ejs', 'utf8');

var server = http.createServer(getFromClient);

server.listen(3000);
console.log('Server start!');

// ここまでメインプログラム

// createServerの処理
function getFromClient(request, response) {

  var url_parts = url.parse(request.url, true); //☆trueにする!
  switch (url_parts.pathname) {

    case '/':
      var content = "これはIndexページです。"
      var query = url_parts.query;
      if (query.msg != undefined) {
        content += 'あなたは、「' + query.msg + '」と送りました。';
      }
      var content = ejs.render(index_page, {
        title: "Index",
        content: content,
      });
      response.writeHead(200, { 'Content-Type': 'text/html' });
      response.write(content);
      response.end();
      break;

    default:
      response.writeHead(200, { 'Content-Type': 'text/plain' });
      response.end('no page...');
      break;
  }
}




▼リスト3-2
<body class="container">
  <header>
    <h1 class="display-4"><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
    <form method="post" action="/other">
      <input type="text" name="msg" class="form-control">
      <input type="submit" value="Click" class="btn btn-primary">
    </form>
  </div>
</body>




▼リスト3-3
const http = require('http');
const fs = require('fs');
const ejs = require('ejs');
const url = require('url');
const qs = require('querystring'); //☆追加

const index_page = fs.readFileSync('./index.ejs', 'utf8');
const other_page = fs.readFileSync('./other.ejs', 'utf8');
const style_css = fs.readFileSync('./style.css', 'utf8');

var server = http.createServer(getFromClient);

server.listen(3000);
console.log('Server start!');

// ここまでメインプログラム==========

// createServerの処理
function getFromClient(request, response) {
  var url_parts = url.parse(request.url, true); //☆trueに

  switch (url_parts.pathname) {

    case '/':
      response_index(request, response); //☆修正
      break;

    case '/other':
      response_other(request, response); //☆修正
      break;

    case '/style.css':
      response.writeHead(200, { 'Content-Type': 'text/css' });
      response.write(style_css);
      response.end();
      break;

    default:
      response.writeHead(200, { 'Content-Type': 'text/plain' });
      response.end('no page...');
      break;
  }
}

// ☆indexのアクセス処理
function response_index(request, response) {
  var msg = "これはIndexページです。"
  var content = ejs.render(index_page, {
    title: "Index",
    content: msg,
  });
  response.writeHead(200, { 'Content-Type': 'text/html' });
  response.write(content);
  response.end();
}

// ☆otherのアクセス処理
function response_other(request, response) {
  var msg = "これはOtherページです。"

  // POSTアクセス時の処理
  if (request.method == 'POST') {
    var body = '';

    // データ受信のイベント処理
    request.on('data', (data) => {
      body += data;
    });

    // データ受信終了のイベント処理
    request.on('end', () => {
      var post_data = qs.parse(body); // ☆データのパース
      msg += 'あなたは、「' + post_data.msg + '」と書きました。';
      var content = ejs.render(other_page, {
        title: "Other",
        content: msg,
      });
      response.writeHead(200, { 'Content-Type': 'text/html' });
      response.write(content);
      response.end();
    });

    // GETアクセス時の処理
  } else {
    var msg = "ページがありません。"
    var content = ejs.render(other_page, {
      title: "Other",
      content: msg,
    });
    response.writeHead(200, { 'Content-Type': 'text/html' });
    response.write(content);
    response.end();
  }
}




▼リスト3-4
// 追加するデータ用変数
var data = {
  'Taro': '09-999-999',
  'Hanako': '080-888-888',
  'Sachiko': '070-777-777',
  'Ichiro': '060-666-666'
};

// indexのアクセス処理
function response_index(request, response) {
  var msg = "これはIndexページです。"
  var content = ejs.render(index_page, {
    title: "Index",
    content: msg,
    data: data,
  });
  response.writeHead(200, { 'Content-Type': 'text/html' });
  response.write(content);
  response.end();
}




▼リスト3-5
<body class="container">
  <header>
    <h1 class="display-4"><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
    <table class="table">
      <% for(var key in data) { %>
      <tr>
        <th><%= key %></th>
        <td><%= data[key] %></td>
      </tr>
      <% } %>
    </table>
  </div>
</body>




▼リスト3-6
<tr>
  <th><%= id %></th>
  <td><%= key %></td>
  <td><%= val[0] %></td>
</tr>




▼リスト3-7
<body class="container">
  <header>
    <h1 class="display-4"><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
    <table class="table">
      <% var id = 0; %>
      <% for(var key in data) { %>
      <%- include('data_item', 
              {id:++id, key:key, val:[data[key]]}) %>
      <% } %>
    </table>
  </div>
</body>




▼リスト3-8
function response_index(request, response) {
  var msg = "これはIndexページです。"
  var content = ejs.render(index_page, {
    title: "Index",
    content: msg,
    data: data,
    filename: 'data_item' //☆追記
  });
  response.writeHead(200, { 'Content-Type': 'text/html' });
  response.write(content);
  response.end();
}




▼リスト3-9
<table class="table table-dark">
  <tr>
    <th><%= id %>:
      <%= key %></th>
  </tr>
  <% for(var i in val){ %>
  <tr>
    <td><%= val[i] %></td>
  </tr>
  <% } %>
</table>




▼リスト3-10
<body class="container">
  <header>
    <h1 class="display-4"><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
    <% var id = 0; %>
    <% for(var key in data) { %>
    <%- include('data_item', 
          {id:++id, key:key, val:[data[key]]}) %>
    <% } %>
  </div>
</body>




▼リスト3-11
var data2 = {
  'Taro': ['taro@yamada', '09-999-999', 'Tokyo'],
  'Hanako': ['hanako@flower', '080-888-888', 'Yokohama'],
  'Sachiko': ['sachi@happy', '070-777-777', 'Nagoya'],
  'Ichiro': ['ichi@baseball', '060-666-666', 'USA'],
}

// otherのアクセス処理
function response_other(request, response) {
  var msg = "これはOtherページです。"
  var content = ejs.render(other_page, {
    title: "Other",
    content: msg,
    data: data2,
    filename: 'data_item'
  });
  response.writeHead(200, { 'Content-Type': 'text/html' });
  response.write(content);
  response.end();
}




▼リスト3-12
<body class="container">
  <header>
    <h1 class="display-4"><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
    <% var id = 0; %>
    <% for(var key in data) { %>
    <%- include('data_item', 
          {id:++id, key:key, val:[data[key]]}) %>
    <% } %>
  </div>
</body>




▼リスト3-13
<body class="container">
  <header>
    <h1 class="display-4"><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
    <table class="table">
      <tr>
        <th>伝言です！</th>
      </tr>
      <tr>
        <td><%=data.msg %></td>
      </tr>
    </table>
    <form method="post" action="/">
      <div class="form-group">
        <label for="msg">MESSAGE</label>
        <input type="text" name="msg" id="msg" 
          class="form-control">
      </div>
      <input type="submit" value="送信" 
        class="btn btn-primary">
    </form>
  </div>
</body>




▼リスト3-14
var data = { msg: 'no message...' };

function response_index(request, response) {
  // POSTアクセス時の処理
  if (request.method == 'POST') {
    var body = '';

    // データ受信のイベント処理
    request.on('data', (data) => {
      body += data;
    });

    // データ受信終了のイベント処理
    request.on('end', () => {
      data = qs.parse(body); // ☆データのパース
      write_index(request, response);
    });
  } else {
    write_index(request, response);
  }
}

// indexの表示の作成
function write_index(request, response) {
  var msg = "※伝言を表示します。"
  var content = ejs.render(index_page, {
    title: "Index",
    content: msg,
    data: data,
  });
  response.writeHead(200, { 'Content-Type': 'text/html' });
  response.write(content);
  response.end();
}




▼リスト3-15
<body class="container">
  <header>
    <h1 class="display-4"><%=title %></h1>
  </header>
  <div role="main">
    <p><%=content %></p>
    <table class="table">
      <tr>
        <th>伝言です！</th>
      </tr>
      <tr>
        <td><%=data.msg %></td>
      </tr>
    </table>
    <p>your last message:<%= cookie_data %></p>
    <form method="post" action="/">
      <div class="form-group">
        <label for="msg">MESSAGE</label>
        <input type="text" name="msg" id="msg" 
          class="form-control">
      </div>
      <input type="submit" value="送信" 
        class="btn btn-primary">
  </div>
</body>




▼リスト3-16
// データ
var data = { msg: 'no message...' };

// indexのアクセス処理
function response_index(request, response) {
  // POSTアクセス時の処理
  if (request.method == 'POST') {
    var body = '';

    // データ受信のイベント処理
    request.on('data', (data) => {
      body += data;
    });

    // データ受信終了のイベント処理
    request.on('end', () => {
      data = qs.parse(body);
      // クッキーの保存
      setCookie('msg', data.msg, response);
      write_index(request, response);
    });
  } else {
    write_index(request, response);
  }
}

// indexのページ作成
function write_index(request, response) {
  var msg = "※伝言を表示します。"
  var cookie_data = getCookie('msg', request);
  var content = ejs.render(index_page, {
    title: "Index",
    content: msg,
    data: data,
    cookie_data: cookie_data,
  });
  response.writeHead(200, { 'Content-Type': 'text/html' });
  response.write(content);
  response.end();
}

// クッキーの値を設定
function setCookie(key, value, response) {
  var cookie = escape(value);
  response.setHeader('Set-Cookie', [key + '=' + cookie]);
}
// クッキーの値を取得
function getCookie(key, request) {
  var cookie_data = request.headers.cookie != undefined ?
    request.headers.cookie : '';
  var data = cookie_data.split(';');
  for (var i in data) {
    if (data[i].trim().startsWith(key + '=')) {
      var result = data[i].trim().substring(key.length + 1);
      return unescape(result);
    }
  }
  return '';
}




▼リスト3-17
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title>ミニメッセージボード</title>
  <link rel="stylesheet" 
  href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
  crossorigin="anonymous">
  <script>
    function init() {
      var id = localStorage.getItem('id');
      if (id == null) {
        location.href = './login';
      }
      document.querySelector('#id').textContent = 'ID:' + id;
      document.querySelector('#id_input').value = id;
    }
  </script>
</head>

<body class="container" onload="init();">
  <header>
    <h1 class="display-4">メッセージボード</h1>
  </header>
  <div role="main">
    <p>※メッセージは最大10個まで保管されます。</p>
    <form method="post" action="/">
      <p id="id"></p>
      <input type="hidden" id="id_input" name="id">
      <div class="form-group">
        <label for="msg">Message</label>
        <input type="text" name="msg" id="msg" 
          class="form-control">
      </div>
      <input type="submit" value="送信" 
        class="btn btn-primary">
    </form>

    <table class="table">
      <% for(var i in data) { %>
      <%- include('data_item', {val:data[i]}) %>
      <% } %>
    </table>
  </div>
</body>

</html>




▼リスト3-18
<% if (val != ''){ %>
<% var obj = JSON.parse(val); %>
<tr>
  <th><%= obj.id %></th>
  <td><%= obj.msg %></td>
</tr>
<% } %>




▼リスト3-19
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title>ミニメッセージボード</title>
  <link rel="stylesheet" 
  href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
  crossorigin="anonymous">
  <script>
    function setId() {
      var id = document.querySelector('#id_input').value;
      localStorage.setItem('id', id);
      location.href = '/';
    }
  </script>
</head>

<body class="container">

  <header>
    <h1 class="display-4">メッセージボード</h1>
  </header>
  <div role="main">
    <p>あなたのログインネームを入力下さい。</p>
    <div class="form-group">
      <label for="id_input">Login name:</label>
      <input type="text" id="id_input" 
        class="form-control">
    </div>
    <button onclick="setId();" 
      class="btn btn-primary">送信</button>
  </div>
</body>

</html>




▼リスト3-20
const http = require('http');
const fs = require('fs');
const ejs = require('ejs');
const url = require('url');
const qs = require('querystring');

const index_page = fs.readFileSync('./index.ejs', 'utf8');
const login_page = fs.readFileSync('./login.ejs', 'utf8');

const max_num = 10; // 最大保管数
const filename = 'mydata.txt'; // データファイル名
var message_data; // データ
readFromFile(filename);

var server = http.createServer(getFromClient);

server.listen(3000);
console.log('Server start!');

// ここまでメインプログラム==========

// createServerの処理
function getFromClient(request, response) {

  var url_parts = url.parse(request.url, true);
  switch (url_parts.pathname) {

    case '/': // トップページ（メッセージボード）
      response_index(request, response);
      break;

    case '/login': // ログインページ
      response_login(request, response);
      break;

    default:
      response.writeHead(200, { 'Content-Type': 'text/plain' });
      response.end('no page...');
      break;
  }
}

// loginのアクセス処理
function response_login(request, response) {
  var content = ejs.render(login_page, {});
  response.writeHead(200, { 'Content-Type': 'text/html' });
  response.write(content);
  response.end();
}

// indexのアクセス処理
function response_index(request, response) {
  // POSTアクセス時の処理
  if (request.method == 'POST') {
    var body = '';

    // データ受信のイベント処理
    request.on('data', function (data) {
      body += data;
    });

    // データ受信終了のイベント処理
    request.on('end', function () {
      data = qs.parse(body);
      addToData(data.id, data.msg, filename, request);
      write_index(request, response);
    });
  } else {
    write_index(request, response);
  }
}

// indexのページ作成
function write_index(request, response) {
  var msg = "※何かメッセージを書いて下さい。";
  var content = ejs.render(index_page, {
    title: 'Index',
    content: msg,
    data: message_data,
    filename: 'data_item',
  });
  response.writeHead(200, { 'Content-Type': 'text/html' });
  response.write(content);
  response.end();
}

// テキストファイルをロード
function readFromFile(fname) {
  fs.readFile(fname, 'utf8', (err, data) => {
    message_data = data.split('\n');
  })
}

// データを更新
function addToData(id, msg, fname, request) {
  var obj = { 'id': id, 'msg': msg };
  var obj_str = JSON.stringify(obj);
  console.log('add data: ' + obj_str);
  message_data.unshift(obj_str);
  if (message_data.length > max_num) {
    message_data.pop();
  }
  saveToFile(fname);
}

// データを保存
function saveToFile(fname) {
  var data_str = message_data.join('\n');
  fs.writeFile(fname, data_str, (err) => {
    if (err) { throw err; }
  });
}




▼リスト4-1
{
  "name": "ex-gen-app",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www"
  },
  "dependencies": {
    "cookie-parser": "~1.4.6",
    "debug": "~4.3.4",
    "ejs": "~3.1.9",
    "express": "~4.18.2",
    "http-errors": "~2.0.0",
    "morgan": "~1.10.0"
  }
}




▼リスト4-2
const express = require('express')
var app = express()

app.get('/', (req, res) => {
  res.send('Welcome to Express!')
})

app.listen(3000, () => {
  console.log('Start server port:3000')
})




▼リスト4-3
const express = require('express')
var app = express()

app.get('/', (req, res) => {
  res.send('Welcome to Express!')
})

app.listen(3000, () => {
  console.log('Start server port:3000')
})




▼リスト4-4
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;




▼リスト4-5
var express = require('express');
var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

module.exports = router;




▼リスト4-6
<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <h1><%= title %></h1>
    <p>Welcome to <%= title %></p>
  </body>
</html>




▼リスト4-7
#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('ex-gen-app:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

……以下略……




▼リスト4-8
<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta http-equiv="content-type"
      content="text/html; charset=UTF-8">
    <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
  rel="stylesheet" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body class="container">
    <header>
        <h1><%= title %></h1>
    </header>
    <div role="main">
        <p><%- content %></p>
    </div>
  </body>
</html>




▼リスト4-9
const express = require('express');
const router = express.Router();

router.get('/', (req, res, next) => {
  var data = {
    title: 'Hello!',
    content: 'これは、サンプルのコンテンツです。<br>this is sample content.'
  };
  res.render('hello', data);
});

module.exports = router;




▼リスト4-10
var helloRouter = require('./routes/hello');
app.use('/hello', helloRouter);




▼リスト4-11
const express = require('express');
const router = express.Router();

router.get('/', (req, res, next) => {
  var name = req.query.name;
  var mail = req.query.mail;
  var data = {
    title: 'Hello!',
    content: 'あなたの名前は、' + name + '。<br>' +
      'メールアドレスは、' + mail + 'です。'
  };
  res.render('hello', data);
});

module.exports = router;




▼リスト4-12
exports.json = bodyParser.json
exports.query = require('./middleware/query');
exports.static = require('serve-static');
exports.urlencoded = bodyParser.urlencoded




▼リスト4-13
<body class="container">
  <header>
    <h1>
      <%= title %></h1>
  </header>
  <div role="main">
    <p class="h6"><%- content %></p>
    <form method="post" action="/hello/post">
      <div class="form-group">
        <label for="msg">Message:</label>
        <input type="text" name="message" id="msg" 
          class="form-control">
      </div>
      <input type="submit" value="送信" 
        class="btn btn-primary">
    </form>
  </div>
</body>




▼リスト4-14
const express = require('express');
const router = express.Router();

router.get('/', (req, res, next) => {
  var data = {
    title: 'Hello!',
    content: '※何か書いて送信して下さい。'
  };
  res.render('hello', data);
});

router.post('/post', (req, res, next) => {
  var msg = req.body['message'];
  var data = {
    title: 'Hello!',
    content: 'あなたは、「' + msg + '」と送信しました。'
  };
  res.render('hello', data);
});

module.exports = router;




▼リスト4-15
const session = require('express-session'); //☆

var session_opt = {
  secret: 'keyboard cat',
  resave: false,
  saveUninitialized: false, 
  cookie: { maxAge: 60 * 60 * 1000 }
};
app.use(session(session_opt));




▼リスト4-16
const express = require('express');
const router = express.Router();

router.get('/', (req, res, next) => {
  var msg = '※何か書いて送信して下さい。';
  if (req.session.message != undefined) {
    msg = "Last Message: " + req.session.message;
  }
  var data = {
    title: 'Hello!',
    content: msg
  };
  res.render('hello', data);
});

router.post('/post', (req, res, next) => {
  var msg = req.body['message'];
  req.session.message = msg;
  var data = {
    title: 'Hello!',
    content: "Last Message: " + req.session.message
  };
  res.render('hello', data);
});

module.exports = router;




▼リスト4-17
const express = require('express');
const router = express.Router();
const http = require('https'); 
const parseString = require('xml2js').parseString;

router.get('/', (req, res, next) => {
  var opt = {
    host: 'news.google.com',
    port: 443,
    path: '/rss?hl=ja&ie=UTF-8&oe=UTF-8&gl=JP&ceid=JP:ja'
  };
  http.get(opt, (res2) => {
    var body = '';
    res2.on('data', (data) => {
      body += data;
    });
    res2.on('end', () => {
      parseString(body.trim(), (err, result) => {
        console.log(result);
        var data = {
          title: 'Google News',
          content: result.rss.channel[0].item
        };
        res.render('hello', data);
      });
    })
  });
});

module.exports = router;




▼リスト4-18
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
  rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">
  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <% if (content != null) { %>
    <ol>
      <% for(var i in content) { %>
      <% var obj = content[i]; %>
      <li><a href="<%=obj.link %>">
        <%= obj.title %></a></li>
      <% } %>
    </ol>
    <% } %>
  </div>
</body>

</html>




▼リスト5-1
<body class="container">
  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <table class="table">
      <% for(var i in content) { %>
      <tr>
        <% var obj = content[i]; %>
        <th><%= obj.id %></th>
        <td><%= obj.name %></td>
        <td><%= obj.mail %></td>
        <td><%= obj.age %></td>
      </tr>
      <% } %>
    </table>
  </div>
</body>




▼リスト5-2
const express = require('express');
const router = express.Router();

const sqlite3 = require('sqlite3'); // 追加

// データベースオブジェクトの取得
const db = new sqlite3.Database('mydb.db');

// GETアクセスの処理
router.get('/',(req, res, next) => {
  // データベースのシリアライズ
  db.serialize(() => {
    //レコードをすべて取り出す
    db.all("select * from mydata",(err, rows) => {
      // データベースアクセス完了時の処理
      if (!err) {
        var data = {
          title: 'Hello!',
          content: rows // 取得したレコードデータ
        };
        res.render('hello', data);
      }   
    }); 
  }); 
});

module.exports = router;




▼リスト5-3
router.get('/',(req, res, next) => {
  db.all("select * from mydata",(err, rows) => {
    if (!err) {
      var data = {
        title: 'Hello!',
        content: rows
      };
      res.render('hello', data);
    }   
  }); 
});




▼リスト5-4
const express = require('express');
const router = express.Router();

const sqlite3 = require('sqlite3');

// データベースオブジェクトの取得
const db = new sqlite3.Database('mydb.db');

// GETアクセスの処理
router.get('/',(req, res, next) => {
  db.serialize(() => {
    var rows = "";
    db.each("select * from mydata",(err, row) => {
      if (!err) {
        rows += "<tr><th>" + row.id + "</th><td>"
          + row.name + "</td></tr>";
      }   
    }, (err, count) => {
      if (!err){
        var data = {
          title: 'Hello!',
          content: rows
        };
        res.render('hello', data);        
      }
    }); 
  });
});

module.exports = router;




▼リスト5-5
<body class="container">
  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <table class="table">
      <%- content %>
    </table>
  </div>
</body>




▼リスト5-6
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">

  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <p><%- content %></p>
    <form method="post" action="/hello/add">
      <div class="form-group">
        <label for="name">NAME</label>
        <input type="text" name="name" id="name" 
          class="form-control">
      </div>
      <div class="form-group">
        <label for="mail">MAIL</label>
        <input type="text" name="mail" id="mail" 
          class="form-control">
      </div>
      <div class="form-group">
        <label for="age">AGE</label>
        <input type="number" name="age" id="age" 
          class="form-control">
      </div>
      <input type="submit" value="作成" 
      class="btn btn-primary">
    </form>
  </div>
</body>

</html>




▼リスト5-7
router.get('/add', (req, res, next) => {
  var data = {
      title: 'Hello/Add',
      content: '新しいレコードを入力：'
  }
  res.render('hello/add', data);
});

router.post('/add', (req, res, next) => {
  const nm = req.body.name;
  const ml = req.body.mail;
  const ag = req.body.age;
  db.serialize(() => {
    db.run('insert into mydata (name, mail, age) values (?, ?, ?)',
      nm, ml, ag);
  });
  res.redirect('/hello');
});




▼リスト5-8
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">

  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <p><%= content %></p>
    <table class="table">
      <tr>
        <th>ID</th>
        <td><%= mydata.id %></td>
      </tr>
      <tr>
        <th>NAME</th>
        <td><%= mydata.name %></td>
      </tr>
      <tr>
        <th>MAIL</th>
        <td><%= mydata.mail %></td>
      </tr>
      <tr>
        <th>AGE</th>
        <td><%= mydata.age %></td>
      </tr>
    </table>
  </div>
</body>

</html>




▼リスト5-9
router.get('/show', (req, res, next) => {
  const id = req.query.id;
  db.serialize(() => {
    const q = "select * from mydata where id = ?";
    db.get(q, [id], (err, row) => {
      if (!err) {
        var data = {
          title: 'Hello/show',
          content: 'id = ' + id + ' のレコード：',
          mydata: row
        }
        res.render('hello/show', data);
      }   
    }); 
  }); 
});




▼リスト5-10
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">

  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <p><%= content %></p>
    <form method="post" action="/hello/edit">
      <input type="hidden" name="id" 
        value="<%= mydata.id %>">
      <div class="form-group">
        <label for="name">NAME</label>
        <input type="text" name="name" id="name" 
          class="form-control" value="<%= mydata.name %>">
      </div>
      <div class="form-group">
        <label for="mail">MAIL</label>
        <td><input type="text" name="mail" id="mail" 
          class="form-control" value="<%= mydata.mail %>">
      </div>
      <div class="form-group">
        <label for="age">AGE</label>
        <td><input type="number" name="age" id="age" 
          class="form-control" value="<%= mydata.age %>">
      </div>
      <input type="submit" value="更新" 
        class="btn btn-primary">
    </form>
  </div>
</body>

</html>




▼リスト5-11
router.get('/edit', (req, res, next) => {
  const id = req.query.id;
  db.serialize(() => {
    const q = "select * from mydata where id = ?";
    db.get(q, [id], (err, row) => {
      if (!err) {
        var data = {
          title: 'hello/edit',
          content: 'id = ' + id + ' のレコードを編集：',
          mydata: row
        }
        res.render('hello/edit', data);
      }   
    }); 
  }); 
});

router.post('/edit', (req, res, next) => {
  const id = req.body.id;
  const nm = req.body.name;
  const ml = req.body.mail;
  const ag = req.body.age;
  const q = "update mydata set name = ?, mail = ?, age = ? where id = ?";
  db.serialize(() => {
    db.run(q, nm, ml, ag, id);
  });
  res.redirect('/hello');
});




▼リスト5-12
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">

  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <p><%= content %></p>
    <table class="table">
      <tr>
        <th>NAME</th>
        <td><%= mydata.name %></td>
      </tr>
      <tr>
        <th>MAIL</th>
        <td><%= mydata.mail %></td>
      </tr>
      <tr>
        <th>AGE</th>
        <td><%= mydata.age %></td>
      </tr>
      <tr>
        <th></th>
        <td></td>
      </tr>
    </table>
    <form method="post" action="/hello/delete">
      <input type="hidden" name="id" 
        value="<%= mydata.id %>">
      <input type="submit" value="削除" 
        class="btn btn-primary">
    </form>
  </div>
</body>

</html>




▼リスト5-13
router.get('/delete', (req, res, next) => {
  const id = req.query.id;
  db.serialize(() => {
    const q = "select * from mydata where id = ?";
    db.get(q, [id], (err, row) => {
      if (!err) {
        var data = {
          title: 'Hello/Delete',
          content: 'id = ' + id + ' のレコードを削除：',
          mydata: row
        }
        res.render('hello/delete', data);
      }   
    }); 
  }); 
});

router.post('/delete', (req, res, next) => {
  const id = req.body.id;
  db.serialize(() => {
    const q = "delete from mydata where id = ?";
    db.run(q, id);
  });
  res.redirect('/hello');
});




▼リスト5-14
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">

  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <p><%= content %></p>
    <form method="post" action="/hello/find">
      <div class="form-group">
        <label for="find">FIND</label>
        <input type="text" name="find" id="find" 
          class="form-control" value="<%=find %>">
      </div>
      <input type="submit" value="更新" 
        class="btn btn-primary">
    </form>

    <table class="table mt-4">
      <% for(var i in mydata) { %>
      <tr>
        <% var obj = mydata[i]; %>
        <th><%= obj.id %></th>
        <td><%= obj.name %></td>
        <td><%= obj.mail %></td>
        <td><%= obj.age %></td>
      </tr>
      <% } %>
    </table>
  </div>
</body>

</html>




▼リスト5-15
router.get('/find',(req, res, next) => {
  db.serialize(() => {
    db.all("select * from mydata",(err, rows) => {
      if (!err) {
        var data = {
          title: 'Hello/find',
          find:'',
          content:'検索条件を入力して下さい。',
          mydata: rows
        };
        res.render('hello/find', data);
      }   
    }); 
  }); 
});

router.post('/find', (req, res, next) => {
  var find = req.body.find;
  db.serialize(() => {
    var q = "select * from mydata where ";
    db.all(q + find, [], (err, rows) => {
      if (!err) {
        var data = {
          title: 'Hello/find',
          find:find,
          content: '検索条件 ' + find,
          mydata: rows
        }
        res.render('hello/find', data);
      } 
    }); 
  }); 
});




▼リスト5-16
<body class="container">
  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <p><%- content %></p>
    <form method="post" action="/hello/add">
      <div class="form-group">
        <label for="name">NAME</label>
        <input type="text" name="name" id="name" 
          value="<%= form.name %>" 
          class="form-control">
      </div>
      <div class="form-group">
        <label for="mail">MAIL</label>
        <td><input type="text" name="mail" id="mail" 
            value="<%= form.mail %>" 
            class="form-control">
      </div>
      <div class="form-group">
        <label for="age">AGE</label>
        <td><input type="text" name="age" id="age" 
          value="<%= form.age %>" 
          class="form-control">
      </div>
      <input type="submit" value="作成" 
        class="btn btn-primary">
    </form>
  </div>
</body>




▼リスト5-17
const { check, validationResult } = require('express-validator');

router.get('/add', (req, res, next) => {
  var data = {
      title: 'Hello/Add',
      content: '新しいレコードを入力：',
      form: {name:'', mail:'', age:0}
  }
  res.render('hello/add', data);
});

router.post('/add', [
    check('name','NAME は必ず入力して下さい。').notEmpty(),
    check('mail','MAIL はメールアドレスを記入して下さい。').isEmail(),
    check('age', 'AGE は年齢（整数）を入力下さい。').isInt()
  ], (req, res, next) => {
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
        var result = '<ul class="text-danger">';
        var result_arr = errors.array();
        for(var n in result_arr) {
          result += '<li>' + result_arr[n].msg + '</li>'
        }
        result += '</ul>';
        var data = {
            title: 'Hello/Add',
            content: result,
            form: req.body
        }
        res.render('hello/add', data);
    } else {
        var nm = req.body.name;
        var ml = req.body.mail;
        var ag = req.body.age;
        db.serialize(() => {
          db.run('insert into mydata (name, mail, age) values (?, ?, ?)', nm, ml, ag);
        });
        res.redirect('/hello');
    }
});




▼リスト5-18
router.post('/add', [
    check('name','NAME は必ず入力して下さい。').notEmpty().escape(),
    check('mail','MAIL はメールアドレスを記入して下さい。').isEmail().escape(),
    check('age', 'AGE は年齢（整数）を入力下さい。').isInt()
  ], (req, res, next) => {
  ……以下略……




▼リスト5-19
router.post('/add', [
    check('name','NAME は必ず入力して下さい。').notEmpty(),
    check('mail','MAIL はメールアドレスを記入して下さい。').isEmail(),
    check('age', 'AGE は年齢（整数）を入力下さい。').isInt(),
    check('age', 'AGE はゼロ以上120以下で入力下さい。').custom(value =>{
      return value >= 0 && value <= 120;
    })
  ], (req, res, next) => {
  ……以下略……




▼リスト6-1
DATABASE_URL="postgresql://johndoe:randompassword@localhost:5432/mydb?schema=public"




▼リスト6-2
DATABASE_URL="file:./mydb.db"




▼リスト6-3
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




▼リスト6-4
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}




▼リスト6-5
model User {
  id Int @id @default(autoincrement())
  name String @unique
  pass String
  mail String?
  age Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




▼リスト6-6
-- CreateTable
CREATE TABLE "User" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "name" TEXT NOT NULL,
    "pass" TEXT NOT NULL,
    "mail" TEXT,
    "age" INTEGER NOT NULL DEFAULT 0,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL
);

-- CreateIndex
CREATE UNIQUE INDEX "User_name_key" ON "User"("name");




▼リスト6-7
const express = require('express');
const router = express.Router();

const ps = require('@prisma/client');
const prisma = new ps.PrismaClient();

module.exports = router;




▼リスト6-8
router.get('/', (req, res, next)=>{
  prisma.user.findMany().then(users=> {
    const data = {
      title:'Users/Index',
      content:users
    }
    res.render('users/index', data);
  });
});




▼リスト6-9
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">

  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <table class="table">
      <% for(var obj of content) { %>
      <tr>
        <th><%= obj.id %></th>
        <td><%= obj.name %></td>
        <td><%= obj.mail %></td>
        <td><%= obj.age %></td>
      </tr>
      <% } %>
    </table>
  </div>
</body>

</html>




▼リスト6-10
router.get('/',(req, res, next)=> {
  const id = +req.query.id;
  if (!id) {
    prisma.user.findMany().then(users=> {
      const data = {
        title:'Users/Index',
        content:users
      }
      res.render('users/index', data);
    });
  } else {
    prisma.user.findUnique({
      where: {id: id}
    }).then(usr => {
      var data = {
        title: 'Users/Index',
        content: [usr]
      }
      res.render('users/index', data);
    });    
  }
});




▼リスト6-11
router.get('/',(req, res, next)=> {
  const id = +req.query.id;
  if (!id) {
    prisma.user.findMany().then(users=> {
      const data = {
        title:'Users/Index',
        content:users
      }
      res.render('users/index', data);
    });
  } else {
    prisma.user.findMany({
      where: {id: {lte: id} }
    }).then(usrs => {
      var data = {
        title: 'Users/Index',
        content: usrs
      }
      res.render('users/index', data);
    });    
  }
});




▼リスト6-12
router.get('/find',(req, res, next)=> {
  const name = req.query.name;
  prisma.user.findMany({
    where: {name: {contains: name} }
  }).then(usrs => {
    var data = {
      title: 'Users/Find',
      content: usrs
    }
    res.render('users/index', data);
  });   
});




▼リスト6-13
router.get('/find',(req, res, next)=> {
  const min = +req.query.min;
  const max = +req.query.max;
  prisma.user.findMany({
    where: {
      AND: [
        { age: { gte: min }},
        { age: { lte: max }}
      ]
    }
  }).then(usrs => {
    var data = {
      title: 'Users/Find',
      content: usrs
    }
    res.render('users/index', data);
  });   
});




▼リスト6-14
router.get('/find',(req, res, next)=> {
  const name = req.query.name;
  const mail = req.query.mail;
  prisma.user.findMany({
    where: {
      OR: [
        { name: { contains: name }},
        { mail: { contains: mail }}
      ]
    }
  }).then(usrs => {
    var data = {
      title: 'Users/Find',
      content: usrs
    }
    res.render('users/index', data);
  });   
});




▼リスト6-15
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">

  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <form method="post" action="/users/add">
      <div class="form-group">
        <label for="name">NAME</label>
        <input type="text" name="name" id="name" 
          class="form-control">
      </div>
      <div class="form-group">
        <label for="pass"">PASSWORD</label>
        <input type="password" name="pass" id="pass" 
          class="form-control">
      </div>
      <div class="form-group">
        <label for="mail">MAIL</label>
        <input type="text" name="mail" id="mail" 
          class="form-control">
      </div>
      <div class="form-group">
        <label for="age">AGE</label>
        <input type="number" name="age" id="age" 
          class="form-control">
      </div>
      <input type="submit" value="作成" 
        class="btn btn-primary">
    </form>
  </div>
</body>

</html>




▼リスト6-16
router.get('/add',(req, res, next)=> {
  const data = {
    title:'Users/Add'
  }
  res.render('users/Add', data);
});

router.post('/add',(req, res, next)=> {
  prisma.User.create({
    data:{
      name: req.body.name,
      pass: req.body.pass,
      mail: req.body.mail,
      age: +req.body.age
    }
  })
  .then(()=> {
    res.redirect('/users');
  });
});




▼リスト6-17
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">

  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <form method="post" action="/users/edit">
      <input type="hidden" name="id" id="id" value="<%=user.id %>">
      <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <input type="text" class="form-control" 
          id="name" name="name" value="<%=user.name %>">
      </div>
      <div class="mb-3">
        <label for="mail" class="form-label">Mail</label>
        <input type="mail" class="form-control" 
          id="mail" name="mail" value="<%=user.mail %>">
      </div>
      <div class="mb-3">
        <label for="pass" class="form-label">Password</label>
        <input type="text" class="form-control" 
          id="pass" name="pass" value="<%=user.pass %>">
      </div>
      <div class="mb-3">
        <label for="age" class="form-label">Age</label>
        <input type="number" class="form-control" 
          id="age" name="age" value="<%=user.age %>">
      </div>
      <button type="submit" class="btn btn-primary">送信</button>
    </form>    
  </div>
</body>

</html>




▼リスト6-18
router.get('/edit/:id', (req, res, next)=>{
  const id = req.params.id;
  prisma.user.findUnique(
    { where:{ id:+id }}
  ).then(usr=>{
    const data = {
      title:'Users/Edit',
      user:usr
    };
    res.render('users/edit', data) ;   
  });
});

router.post('/edit', (req, res, next)=>{
  const {id, name, pass, mail, age} = req.body;
  prisma.user.update({
    where:{ id: +id },
    data:{
      name:name,
      mail:mail,
      pass:pass,
      age:+age
    }
  }).then(()=>{
    res.redirect('/users');
  });
});




▼リスト6-19
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta http-equiv="content-type" 
    content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' 
    href='/stylesheets/style.css' />
</head>

<body class="container">
  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <table class="table">
      <tr>
        <th>NAME</th>
        <td><%= user.name %></td>
      </tr>
      <tr>
        <th>PASSWORD</th>
        <td><%= user.pass %></td>
      </tr>
      <tr>
        <th>MAIL</th>
        <td><%= user.mail %></td>
      </tr>
      <tr>
        <th>AGE</th>
        <td><%= user.age %></td>
      </tr>
    </table>
    <form method="post" action="/users/delete">
      <input type="hidden" name="id" 
        value="<%= user.id %>">
      <input type="submit" value="削除" 
        class="btn btn-primary">
    </form>
  </div>
</body>

</html>




▼リスト6-20
router.get('/delete/:id',(req, res, next)=> {
  const id = req.params.id;
  prisma.user.findUnique(
    { where:{ id:+id }}
  ).then(usr=>{
    const data = {
      title:'Users/Delete',
      user:usr
    };
    res.render('users/delete', data) ;   
  });
});

router.post('/delete',(req, res, next)=> {
  prisma.User.delete({
    where:{id:+req.body.id}
  }).then(()=> {
    res.redirect('/users');
  });
});




▼リスト6-21
router.get('/', (req, res, next)=>{
  prisma.user.findMany({
    orderBy: [{name:'asc'}]
  }).then(users=> {
    const data = {
      title:'Users/Index',
      content:users
    }
    res.render('users/index', data);
  });
});




▼リスト6-22
const pagesize = 3; // ☆１ページ当たりのレコード数

router.get('/', (req, res, next)=>{
  const page = req.query.page ? +req.query.page : 0;
  prisma.user.findMany({
    orderBy: [{id:'asc'}],
    skip: page * pagesize,
    take: pagesize,
  }).then(users=> {
    const data = {
      title:'Users/Index',
      content:users
    }
    res.render('users/index', data);
  });
});




▼リスト6-23
const pagesize = 3;
var cursor = 1;

router.get('/', (req, res, next)=>{
  prisma.user.findMany({
    orderBy: [{id:'asc'}],
    cursor: { id:cursor },
    take: pagesize,
  }).then(users=> {
    cursor = users[users.length - 1].id;
    const data = {
      title:'Users/Index',
      content:users
    }
    res.render('users/index', data);
  });
});




▼リスト6-24
var lastCursor = 0;
var cursor = 1;

prisma.$use(async (params, next) => {
  const result = await next(params);
  cursor = result[result.length - 1].id;
  if (cursor == lastCursor) {
    cursor = 1;
  }
  lastCursor = cursor;
  return result;
});

router.get('/', (req, res, next)=>{
  prisma.user.findMany({
    orderBy: [{id:'asc'}],
    cursor: {id:cursor},
    take:3,
  }).then(users=> {
    const data = {
      title:'Users/Index',
      content:users
    }
    res.render('users/index', data);
  });
});




▼リスト7-1
"dependencies": {
  "@prisma/client": "^4.13.0",
  "cookie-parser": "~1.4.6",
  "ejs": "~3.1.9",
  "express": "~4.18.2",
  "express-session": "^1.17.3",
  "express-validator": "^7.0.1",
  "morgan": "~1.10.0",
  "sqlite3": "^5.1.6"
}




▼リスト7-2
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}




▼リスト7-3
model Board {
  id Int @id @default(autoincrement())
  message String
  account User @relation(fields: [accountId], references: [id])
  accountId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




▼リスト7-4
model User {
  id Int @id @default(autoincrement())
  name String @unique
  pass String
  mail String?
  age Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages Board[] //☆
}




▼リスト7-5
-- CreateTable
CREATE TABLE "Board" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "message" TEXT NOT NULL,
    "accountId" INTEGER NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL,
    CONSTRAINT "Board_accountId_fkey" FOREIGN KEY ("accountId") REFERENCES 
        "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);




▼リスト7-6
router.get('/login', (req, res, next) => {
  var data = {
     title:'Users/Login',
     content:'名前とパスワードを入力下さい。'
  }
  res.render('users/login', data);
});

router.post('/login', (req, res, next) => {
  prisma.User.findMany({
    where:{
      name:req.body.name,
      pass:req.body.pass,
    }
  }).then(usr=>{
    if (usr != null && usr[0] != null) {
      req.session.login = usr[0];
      let back = req.session.back;
      if (back == null){
        back = '/';
      }
      res.redirect(back);
    } else {
      var data = {
        title:'Users/Login',
        content:'名前かパスワードに問題があります。再度入力下さい。'
      }
      res.render('users/login', data);
    }
  })
});




▼リスト7-7
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta http-equiv="content-type"
      content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body class="container">
  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <p><%- content %></p>
    <form method="post" action="/users/login">
      <div class="form-group">
        <label for="name">NAME</label>
        <input type="text" name="name" id="name" 
          class="form-control">
      </div>
      <div class="form-group">
        <label for="pass">PASSWORD</label>
        <input type="password" name="pass" id="pass" 
          class="form-control">
      </div>
      <input type="submit" value="ログイン" 
        class="btn btn-primary">
    </form>
    <p class="mt-4"><a href="/boards">&lt;&lt; Top へ戻る</a>｜
      <a href="/users/add">アカウントの作成&gt;&gt;</a></p>
  </div>
</body>

</html>




▼リスト7-8
const express = require('express');
const router = express.Router();

const ps = require('@prisma/client');
const prisma = new ps.PrismaClient();

const pnum = 5; // ☆1ページ当たりの表示数

// ログインのチェック
function check(req,res) {
  if (req.session.login == null) {
    req.session.back = '/boards';
    res.redirect('/users/login');
    return true;
  } else {
    return false;
  }
}

// トップページ
router.get('/',(req, res, next)=> {
  res.redirect('/boards/0');
});

// トップページにページ番号をつけてアクセス
router.get('/:page',(req, res, next)=> {
  if (check(req,res)){ return };
  const pg = +req.params.page;
  prisma.Board.findMany({
    skip: pg * pnum,
    take: pnum,
    orderBy: [
      {createdAt: 'desc'}
    ],
    include: {
      account: true,
    },
  }).then(brds => {
    var data = {
      title: 'Boards',
      login:req.session.login,
      content: brds,
      page:pg
    }
    res.render('boards/index', data);
  });
});

// メッセージフォームの送信処理
router.post('/add',(req, res, next)=> {
  if (check(req,res)){ return };
  prisma.Board.create({
    data:{
      accountId: req.session.login.id,
      message:req.body.msg
    }
  })
  .then(()=>{
    res.redirect('/boards');
  })
  .catch((err)=>{
    res.redirect('/boards/add');
  })
});

// 利用者のホーム
router.get('/home/:user/:id/:page',(req, res, next)=> {
  if (check(req,res)){ return };
  const id = +req.params.id;
  const pg = +req.params.page;
  prisma.Board.findMany({
    where: {accountId: id},
    skip: pg * pnum,
    take: pnum,
    orderBy: [
      {createdAt: 'desc'}
    ],
    include: {
      account: true,
    },
  }).then(brds => {
    const data = {
      title: 'Boards',
      login:req.session.login,
      accountId:id,
      userName:req.params.user,
      content: brds,
      page:pg
    }
    res.render('boards/home', data);
  });
});

module.exports = router;




▼リスト7-9
var boardsRouter = require('./routes/boards');
app.use('/boards', boardsRouter);




▼リスト7-10
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta http-equiv="content-type"
      content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body class="container">
  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <p class="h4">Welcome to <%= login.name %>.</p>
    <form method="post" action="/boards/add">
      <div class="row">
        <div class="col-10">
          <input type="text" name="msg" 
            class="form-control">
        </div>
        <input type="submit" value="送信" 
          class="btn btn-primary col-2">
      </div>
    </form>

    <table class="table mt-5">
      <% for(let i in content) { %>
      <%- include('data_item', {val:content[i]}) %>
      <% } %>
    </table>

    <ul class="pagination justify-content-center">
      <li class="page-item">
        <a href="/boards/<%= page - 1 %>" 
          class="page-link">&lt;&lt; prev</a>
      </li>
      <li class="page-item">
        <a href="/boards/<%= page + 1 %>" 
          class="page-link">Next &gt;&gt;</a>
      </li>
    </ul>
  </div>
</body>

</html>




▼リスト7-11
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta http-equiv="content-type"
      content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body class="container">

  <header>
    <h1 class="display-4">
      <%= title %></h1>
  </header>
  <div role="main">
    <p class="h4"><%= userName %>'s messages.</p>
    <table class="table mt-5">
      <% for(let i in content) { %>
      <%- include('data_item', {val:content[i]}) %>
      <% } %>
    </table>

    <ul class="pagination justify-content-center">
      <li class="page-item">
        <a href="/boards/home/<%=userName %>/<%=accountId %>/<%= page - 1 %>" 
          class="page-link">&lt;&lt; prev</a>
      </li>
      <li class="page-item">
        <a href="/boards/home/<%=userName %>/<%=accountId %>/<%= page + 1 %>" 
          class="page-link">Next &gt;&gt;</a>
      </li>
    </ul>
  </div>
  <div class="text-left">
    <a href="/boards">&lt;&lt; Top.</a>
  </div>
</body>

</html>




▼リスト7-12
<% if (val != null){ %>
  <tr class="row">
    <th class="col-2">
      <a class="text-dark" href="/boards/home/<%=val.account.name %>/<%=val.accountId %>/0">
        <%= val.account.name %></a></th>
    <td class="col-7"><%= val.message %></td>
    <%
      var d = new Date(val.createdAt);
      var dstr = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + 
        d.getDate() + ' ' + d.getHours() + ':' + d.getMinutes() + 
        ':' + d.getSeconds();
    %>
    <td class="col-3"><%= dstr %></td>
  </tr>
<% } %>




▼リスト7-13
"dependencies": {
  "@prisma/client": "^4.13.0",
  "cookie-parser": "~1.4.6",
  "express": "~4.18.2",
  "express-session": "^1.17.3",
  "express-validator": "^7.0.1",
  "markdown-it": "^13.0.1",
  "morgan": "~1.10.0",
  "sqlite3": "^5.1.6"
}




▼リスト7-14
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}




▼リスト7-15
model Markdata {
  id Int @id @default(autoincrement())
  title String
  content String
  account User @relation(fields: [accountId], references: [id])
  accountId Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




▼リスト7-16
model User {
  id Int @id @default(autoincrement())
  name String @unique
  pass String
  mail String?
  age Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  markdata Markdata[]
}




▼リスト7-17
-- CreateTable
CREATE TABLE "User" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "name" TEXT NOT NULL,
    "pass" TEXT NOT NULL,
    "mail" TEXT,
    "age" INTEGER NOT NULL DEFAULT 0,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL
);

-- CreateTable
CREATE TABLE "Markdata" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "title" TEXT NOT NULL,
    "content" TEXT NOT NULL,
    "accountId" INTEGER NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL,
    CONSTRAINT "Markdata_accountId_fkey" FOREIGN KEY ("accountId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateIndex
CREATE UNIQUE INDEX "User_name_key" ON "User"("name");




▼リスト7-18
const bodyParser = require('body-parser');

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());




▼リスト7-19
var apiRouter = require('./routes/api');
app.use('/api', apiRouter);




▼リスト7-20
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

const bodyParser = require('body-parser');

const session = require('express-session');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
var apiRouter = require('./routes/api');

var app = express();

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

var session_opt = {
  secret: 'keyboard cat',
  resave: false,
  saveUninitialized: false, 
  cookie: { maxAge: 60 * 60 * 1000 }
};
app.use(session(session_opt));

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/api', apiRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.json(err);
});

module.exports = app;




▼リスト7-21
var express = require('express');
var router = express.Router();

const MarkdownIt = require('markdown-it');
const markdown = new MarkdownIt();

const ps = require('@prisma/client');
const prisma = new ps.PrismaClient();

// ログインチェックの関数
function check(req,res) {
  if (req.session.login == undefined) {
    req.session.back = '/';
    return true;
  } else {
    return false;
  }
}

// ログインチェック
router.get('/check', function(req, res, next) {
  if (check(req, res)) {
    res.json({result:false});
  } else {
    res.json({result:req.session.login.name});
  }
});

// 全データ取得
router.get('/all', (req, res, next)=>{
  if (check(req,res)){
    res.json({});
    return;
  }
  prisma.Markdata.findMany({
    where:{accountId: +req.session.login.id},
    orderBy: [
      {createdAt: 'desc'}
    ],
  }).then(mds=> {
    res.json(mds);    
  });
})

// 指定IDのMarkdata取得
router.get('/mark/:id', (req, res, next) => {
  if (check(req,res)){
    res.json([]);
    return;
  }
  prisma.Markdata.findMany({
    where: {
      id: +req.params.id,
      accountId: +req.session.login.id
    },
    orderBy: [
      {createdAt: 'desc'}
    ],
  })
  .then((models) => {
    const model = models != null ? 
      models[0] != null ? 
        models[0] : null : null;
    res.json(model);
  });
});

// Markdata新規作成
router.post('/add', (req, res, next) => {
  if (check(req,res)){
    res.json({});
    return;
  }
  prisma.Markdata.create({
    data: {
      accountId: req.session.login.id,
      title: req.body.title,
      content: req.body.content,
    }
  })
  .then(model => {
     res.json(model);
  });
});

// Markdataのコンテンツ更新
router.post('/mark/edit', (req, res, next) => {
  if (check(req,res)){
    res.json({});
    return;
  }
  prisma.Markdata.update({
    where:{ id: +req.body.id },
    data:{
      title: req.body.title,
      content: req.body.content
    }
  })
  .then(model => {
    res.json(model);
  });
});

// Markdataのレンダリング結果
router.post('/mark/render', (req, res, next)=>{
  if (check(req,res)){
    res.json({});
    return;
  }
  const source = req.body.source;
  const ren = markdown.render(source);
  const result = {render:ren};
  res.json(result);
})

module.exports = router;




▼リスト7-22
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta http-equiv="content-type"
      content="text/html; charset=UTF-8">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body class="container">
  <header>
    <h1 class="display-4">Login</h1>
  </header>
  <div role="main">
    <form method="post" action="/users/login">
      <div class="form-group">
        <label for="name">NAME</label>
        <input type="text" name="name" id="name" 
          class="form-control">
      </div>
      <div class="form-group">
        <label for="pass">PASSWORD</label>
        <input type="password" name="pass" id="pass" 
          class="form-control">
      </div>
      <input type="submit" value="ログイン" 
        class="btn btn-primary">
    </form>
  </div>
</body>

</html>




▼リスト7-23
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta http-equiv="content-type"
      content="text/html; charset=UTF-8">
  <title>Login</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
    rel="stylesheet" crossorigin="anonymous">
  <style>
  .table-wrapper {
    width: 100%;
    height: 200px;
    overflow: auto;
    padding: 5px;
    border: 2px solid #a3a3a3;
  }
  </style>
  <script>
    var accountId = '';
    var mkdata = [];
    var title = '';
    var source = '';
    var content = '';
    var editId = 0;
    var mode = '新規作成';

    // 表示の更新
    function refresh() {
      document.querySelector("#accountId").textContent = accountId;
      document.querySelector("#title").value = title;
      document.querySelector("#source").value = source;
      document.querySelector("#content").innerHTML = content;
      document.querySelector("#modebtn").value = mode;
    }
    // データの更新
    function refreshData() {
      let con = ""
      mkdata.map((ob)=>{
        con += "<tr><td>";
        con += '<a className="text-dark" href="#" onClick="getById(event)" name="' + ob.id + '">';
        con += ob.title + "</a>";
        con += "</td></tr>";         
      });
      document.querySelector('#datacontainer').innerHTML = con;
    }

    // アカウントのチェック
    function getAccount() {
    fetch('/api/check')
      .then(resp=> resp.json())
      .then(res=>{
        if (res.result != false) {
          accountId = res.result;
          getAllData();
          refresh();
        } else {
          window.location.href="/login.html"; // ☆ログインページ
        }
      });
  }
  // 全データを取得
  function getAllData() {
    fetch('/api/all')
      .then(resp=> resp.json())
    .then(res=>{
      mkdata = res;
      refreshData();
    });
  }
  // 指定IDのデータを取得
  function getById(e) {
    fetch('/api/mark/' + e.target.name)
      .then(resp=> resp.json())
      .then(res=>{
        title = res.title;
        source = res.content;
        editId = res.id;
        getRender(res.content);
        mode = "更新";
      });
  }
  // Markdownにレンダリングする
  function getRender(src) {
    const source = {source: src};
    fetch('/api/mark/render', {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(source),
    }).then(data=>data.json())
      .then(res=>{
        content = res.render;
        refresh();
      });
  }
  // データを送信する
  function sendData() {
    title = document.querySelector("#title").value;
    source = document.querySelector("#source").value;
    if (mode == '新規作成') {
      create();
    } else {
      update();
    }
  }
  // レコードを新規作成する
  function create() {
    const data = {
      title:title,
      content:source,
      accountId:accountId
    }
    fetch('/api/add', {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data),
    }).then(data=>{
      getAllData();
    });
  }
  // レコードを更新する
  function update() {
    const data = {
      title:title,
      content:source,
      id:editId
    }
    fetch('/api/mark/edit', {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data),
    }).then(data=>{
      getAllData();
    });
  }
  </script>
</head>

<body class="container" onload="getAccount()">
<div class="App">
  <header>
    <h1 class="display-4 text-primary">Markdown data</h1>
  </header>
  <div role="main">
    <p class="h5 my-4">Hi, 
      <span id="accountId"></span>!</p>

    <div class="table-wrapper">
      <table class="table">
        <thead><tr><th>Title</th></tr></thead>
        <tbody id="datacontainer">
        </tbody>
      </table>
    </div>

    <hr/>

    <div>
      <div class="form-group">
        <label>TITLE</label>
        <input type="text" name="title" id="title"
          class="form-control" value="" />
      </div>
      <div class="form-group">
        <label>SOURCE</label>
        <textarea name="source" id="source" rows="8"
          class="form-control" value=""></textarea>
      </div>

      <center><input id="modebtn" type="button" value="作成" onClick="sendData()"
        class="btn btn-primary m-2"/></center>
    </div>

    <div class="card mt-4">
      <div class="card-header text-center h5">
        Preview
      </div>
      <div class="card-body">
      <div id="content"></div>
      </div>
    </div>

  </div>
</div>
</body>
</html>




▼リスト7-24

<!DOCTYPE html>
<html lang="ja">
  <head>
    ……略……
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root" class="container"></div>
  </body>
</html>




▼リスト7-25
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();




▼リスト7-26
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        ……表示コンテンツ……
      </header>
    </div>
  );
}

export default App;




▼リスト7-27
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" 
  rel="stylesheet" crossorigin="anonymous">




▼リスト7-28
.table-wrapper {
  width: 100%;
  height: 200px;
  overflow: auto; 
  padding: 5px;
  border: 2px solid #a3a3a3;
}




▼リスト7-29
import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [mkdata, setMkdata] = useState([]);
  const [title, setTitle] = useState("");
  const [source, setSource] = useState("");
  const [content, setContent] = useState('');
  const [mode, setMode] = useState("新規作成");
  const [editId, setEditId] = useState(0);
  const [accountId, setAccountId] = useState('');

  // アカウントのチェック
  const getAccount = ()=> {
    fetch('/api/check')
      .then(resp=> resp.json())
      .then(res=>{
        if (res.result != false) {
          setAccountId(res.result);
        } else {
          window.location.href="/login.html"; //☆
        }
      });
  }
  // 全データを取得
  const getAllData = ()=>{
    fetch('/api/all')
      .then(resp=> resp.json())
    .then(res=>{
      setMkdata(res);
    });
  }
  // 指定IDのデータを取得
  const getById = (e)=>{
    fetch('/api/mark/' + e.target.name)
    .then(resp=> resp.json())
    .then(res=>{
      setTitle(res.title);
      setSource(res.content);
      setEditId(res.id);
      getRender(res.content);
      setMode("更新");
    });
  }
  // Markdownにレンダリングする
  const getRender = (src)=> {
    const source = {source: src};
    fetch('/api/mark/render', {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(source),
    }).then(data=>data.json())
      .then(res=>{
        setContent(res.render);
      });
  }
  // データを送信する
  const sendData = ()=> {
    if (mode == '新規作成') {
      create();
    } else {
      update();
    }
  }
  // レコードを新規作成する
  const create = ()=> {
    const data = {
      title:title,
      content:source,
      accountId:accountId
    }
    fetch('/api/add', {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data),
    }).then(data=>{
      getAllData();
    });
  }
  /// レコードを更新する
  const update = ()=> {
    const data = {
      title:title,
      content:source,
      id:editId
    }
    fetch('/api/mark/edit', {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data),
    }).then(data=>{
      console.log(data);
    });
  }
  // タイトルの更新
  const changeTitle = (e)=> {
    setTitle(e.target.value);
  }
  // ソースの更新
  const changeSource = (e)=> {
    setSource(e.target.value);
  }
  // 副作用エフェクト
  useEffect(()=>{
    getAccount();
    getAllData();
  },[]);

  return (
    <div className="App">
      <header>
        <h1 className="display-4 text-primary">Markdown data</h1>
      </header>
      <div role="main">
        <p className="h5 my-4">Hi, 
          <span>{ accountId }</span>!</p>

        <div className="table-wrapper">
          <table className="table">
            <thead><tr><th>Title</th></tr></thead>
            <tbody>
            { mkdata.map((ob)=>(
            <tr>
              <td>
                <a className="text-dark" href="#" onClick={getById} name={ob.id}>
                  { ob.title }</a>
              </td>
            </tr>            
            ) ) }
            </tbody>
          </table>
        </div>

        <hr/>

        <div>
          <div class="form-group">
            <label>TITLE</label>
            <input type="text" name="title" id="title" onChange={changeTitle}
              class="form-control" value={title} />
          </div>
          <div class="form-group">
            <label>SOURCE</label>
            <textarea name="source" id="source" rows="8" onChange={changeSource}
              class="form-control" value={source}></textarea>
          </div>

          <center><input type="button" value={ mode } onClick={sendData}
            class="btn btn-primary m-2"/></center>
        </div>

        <div class="card mt-4">
          <div class="card-header text-center h5">
            Preview
          </div>
          <div class="card-body">
          <div dangerouslySetInnerHTML={{ __html: content }} />
          </div>
        </div>

      </div>
    </div>
  );
}

export default App;




▼リスト7-30
.table-wrapper {
  width: 100%;
  height: 200px;
  overflow: auto;
  padding: 5px;
  border: 2px solid #a3a3a3;
}




▼リスト7-31
const buildPath = process.env.BUILD_PATH || '../ex-gen-app/public';